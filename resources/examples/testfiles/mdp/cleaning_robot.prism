mdp 
// "multi( Pmax=? [GF x=1], Pmax=? [GF x=2], Pmax=? [GF x=3], Pmax=? [GF x=9])"
const double p = 1.0; 

module robot
    x : [-1..9] init 0;
    e : [0..10] init 10;
    
    // battery empty
    [] e=0 -> (e'=0) & (x'=-1);
    // load battery
    [] x=6 -> (e'=10);
    [] (x=6) & (e>0) -> (x'=0);
    //hallway
    [] (x=0) & (e>0) -> p : (x'=1) & (e'=max(0,e-1)) + (1-p) : (x'=0) & (e'=max(0,e-1));
    [] (x=0) & (e>0) -> p : (x'=2) & (e'=max(0,e-1)) + (1-p) : (x'=0) & (e'=max(0,e-1));
    [] (x=0) & (e>0) -> p : (x'=3) & (e'=max(0,e-1)) + (1-p) : (x'=0) & (e'=max(0,e-1));
    [] (x=0) & (e>0) -> p : (x'=4) & (e'=max(0,e-1)) + (1-p) : (x'=0) & (e'=max(0,e-1));
    [] (x=0) & (e>0) -> p : (x'=5) & (e'=max(0,e-1)) + (1-p) : (x'=0) & (e'=max(0,e-1));
    [] (x=0) & (e>0) -> p : (x'=6) & (e'=max(0,e-1)) + (1-p) : (x'=0) & (e'=max(0,e-1));
    //clean rooms
    // go back
    [] (x=1) & (e>0) -> (x'=0) & (e'=max(0,e-1));
    [] (x=2) & (e>0) -> (x'=0) & (e'=max(0,e-1));
    [] (x=3) & (e>0) -> (x'=0) & (e'=max(0,e-1));
    [] (x=4) & (e>0) -> (x'=0) & (e'=max(0,e-1));
    [] (x=5) & (e>0) -> (x'=0) & (e'=max(0,e-1));
    [] (x=1) & (e>0) -> (x'=0) & (e'=max(0,e-1));
    // change floors
    [] (x=0) & (e>0) -> p : (x'=7) & (e'=max(0,e-1)) + (1-p) : (x'=0) & (e'=max(0,e-1));
    // load battery on second floor
    [] (x=7) & (e>0) -> p : (x'=8) & (e'=max(0,e-1)) + (1-p) : (x'=7) & (e'=max(0,e-1));
    [] (x=8) -> (e'=10);
    [] (x=8) & (e>0) -> (x'=7);
    // clean room on second floor
    [] (x=7) & (e>0) -> p : (x'=9) & (e'=max(0,e-1)) + (1-p) : (x'=7) & (e'=max(0,e-1));
    [] (x=9) & (e>0) -> (x'=7) & (e'=max(0,e-1));
    
endmodule
